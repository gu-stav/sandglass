// Generated by CoffeeScript 1.7.1
(function() {
  var Promise, bcrypt, crypto, _;

  _ = require('lodash');

  bcrypt = require('bcrypt');

  crypto = require('crypto');

  Promise = require('bluebird');

  module.exports = function(sequelize, DataTypes) {
    return sequelize.define('User', {
      name: {
        type: DataTypes.STRING,
        allowNull: false,
        validate: {
          notEmpty: true
        }
      },
      email: {
        type: DataTypes.STRING,
        allowNull: false,
        unique: true,
        validate: {
          isEmail: true
        }
      },
      password: {
        type: DataTypes.STRING,
        allowNull: false,
        validate: {
          notEmpty: true
        }
      },
      salt: DataTypes.STRING,
      session: DataTypes.STRING
    }, {
      classMethods: {
        associate: function(models) {},
        findBySession: function(session) {
          return new Promise((function(_this) {
            return function(resolve, reject) {
              var search;
              search = {
                where: {
                  session: session
                }
              };
              return _this.find(search).then(resolve, reject);
            };
          })(this));
        },
        signup: function(data) {
          return new Promise((function(_this) {
            return function(resolve, reject) {
              var rawPassword;
              rawPassword = data._rawPassword;
              if (!rawPassword) {
                throw new Error('_rawPassword was not provided.');
              }
              return bcrypt.genSalt(12, function(err, salt) {
                if (err) {
                  throw new Error(err);
                }
                return bcrypt.hash(rawPassword, salt, function(err, hash) {
                  if (err) {
                    throw new Error(err);
                  }
                  data.password = hash;
                  return _this.create(data).then(resolve, reject);
                });
              });
            };
          })(this));
        },
        logout: function(session) {
          return new Promise((function(_this) {
            return function(resolve, reject) {
              return _this.findBySession(session).then(function(user) {
                var update;
                if (!user) {
                  throw new Error('User not found');
                }
                update = {
                  session: ''
                };
                return user.updateAttributes(update).then(resolve, reject);
              });
            };
          })(this));
        },
        login: function(data) {
          return new Promise((function(_this) {
            return function(resolve, reject) {
              var email, password, search;
              password = data.password;
              email = data.email;
              if (!password) {
                throw new Error('No password was provided');
              }
              if (!email) {
                throw new Error('No email was provided');
              }
              search = {
                where: {
                  email: email
                }
              };
              return _this.find(search).then(function(user) {
                if (!user) {
                  throw new Error('User was not found');
                }
                if (user.session) {
                  return resolve(user);
                }
                return bcrypt.compare(password, user.password, function(err, res) {
                  var session, update;
                  if (err) {
                    throw new Error(err);
                  }
                  if (!res) {
                    throw new Error('Passwords do not match');
                  }
                  session = crypto.createHash('sha1').update(crypto.randomBytes(20)).digest('hex');
                  update = {
                    session: session
                  };
                  return user.updateAttributes(update).then(resolve, reject);
                });
              });
            };
          })(this));
        }
      },
      instanceMethods: {
        render: function(password, salt) {
          var omit;
          if (password == null) {
            password = false;
          }
          if (salt == null) {
            salt = false;
          }
          omit = [];
          if (!password) {
            omit.push('password');
          }
          if (!salt) {
            omit.push('salt');
          }
          return {
            user: _.omit(this.toJSON(), omit)
          };
        }
      }
    });
  };

}).call(this);
